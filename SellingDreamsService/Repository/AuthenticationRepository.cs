using Microsoft.EntityFrameworkCore;
using SellingDreamsInfrastructure;
using SellingDreamsInfrastructure.Model;
using SellingDreamsService.Contracts;
using SellingDreamsService.ContractsDto;

namespace SellingDreamsService.Repository;

public class AuthenticationRepository : IAuthenticationRepository
{
    private const string passwordGenerationError = "Password not generated correctly";
    private string loginNotFound(int id) => $"Login with id {id} does not exits";
    private readonly InfrastructureDbContext _context;

    public AuthenticationRepository(InfrastructureDbContext context)
    {
        _context = context;
    }

    public async Task<UserLogin?> GetLogin(int id) => await _context.UserLogin.SingleOrDefaultAsync(ul => ul.Id == id);
    public async Task<UserLogin?> GetLogin(string name) => await _context.UserLogin.SingleOrDefaultAsync(ul => ul.UserName == name);

    public async Task CreateLogin(UserLogin login)
    {
        if (login.Id != default) throw new Exception("Id is autogenerated");
        if (login.UserName == UserLogin.UserNameDefault) throw new Exception("User name has to be filled");
        if (login.Password == Array.Empty<byte>() || login.Salt == Array.Empty<byte>()) throw new Exception("Password is not set correctly");

        await _context.UserLogin.AddAsync(login);
        _context.SaveChanges();
    }

    public async Task UpdateLogin(UserLogin login)
    {
        var oldLogin = await _context.UserLogin.SingleOrDefaultAsync(ul => ul.Id == login.Id);
        if (oldLogin == null) throw new Exception(loginNotFound(login.Id));
        if (oldLogin.Password == login.Password && oldLogin.Salt != login.Salt) throw new Exception(passwordGenerationError);
        if (oldLogin.Password != login.Password && oldLogin.Salt == login.Salt) throw new Exception(passwordGenerationError);

        oldLogin.UserName = login.UserName;
        oldLogin.Password = login.Password;
        oldLogin.Salt = login.Salt;
        oldLogin.UserId = login.UserId;

        await _context.SaveChangesAsync();
    }

    public async Task PatchLogin(IUserLoginPatchDto login)
    {
        var oldLogin = await _context.UserLogin.SingleOrDefaultAsync(ul => ul.Id == login.Id);
        if (oldLogin == null) throw new Exception(loginNotFound(login.Id));
        if ((oldLogin.Password != null && oldLogin.Salt == null) || (oldLogin.Password != null && oldLogin.Salt == null)) throw new Exception(passwordGenerationError);
        if (oldLogin.Password == login.Password && oldLogin.Salt != login.Salt) throw new Exception(passwordGenerationError);
        if (oldLogin.Password != login.Password && oldLogin.Salt == login.Salt) throw new Exception(passwordGenerationError);

        if (login.UserName != null) oldLogin.UserName = login.UserName;
        if (login.Password != null) oldLogin.Password = login.Password;
        if (login.Salt != null) oldLogin.Salt = login.Salt;
        if (login.UserId != null) oldLogin.UserId = login.UserId;

        await _context.SaveChangesAsync();
    }

    public async Task DeLeteLogin(int id)
    {
        var login = await _context.UserLogin.SingleOrDefaultAsync(ul => ul.Id == id);
        if (login == null) throw new Exception(loginNotFound(id));

        _context.Remove(login);
        await _context.SaveChangesAsync();
    }
}
